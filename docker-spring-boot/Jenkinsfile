node {
    def mvnHome
    stage('Preparation') { 
        
        git 'https://github.com/quick-aib/docker-java.git'
        
        mvnHome = tool 'M3'
    }
    stage('Build') {
        withEnv(["MVN_HOME=$mvnHome"]) {
            if (isUnix()) {
                sh '"$MVN_HOME/bin/mvn" -f docker-spring-boot/pom.xml -Dmaven.test.failure.ignore clean package'
            } else {
                bat(/"%MVN_HOME%\bin\mvn" -Dmaven.test.failure.ignore clean package/)
            }
        }
    }
    stage('docker build') {
        dir("docker-spring-boot") {
            sh "pwd"
            sh 'docker build -t spring-boot:1.0 .'
       } 
    }
    stage('docker push') {
      withCredentials([usernamePassword(credentialsId: 'dockerHub', passwordVariable: 'dockerHubPassword', usernameVariable: 'dockerHubUser')]) {
        sh "docker login -u ${env.dockerHubUser} -p ${env.dockerHubPassword}"
        sh 'docker tag spring-boot:1.0 devopsjuly22017/spring-boot:1.0'
        sh 'docker push devopsjuly22017/spring-boot:1.0'
      }
    }
//     stage('docker run') {
//         dir("docker-spring-boot") {
//             sh 'docker rm -f sba1'
// //             sh 'docker run -d -p 8083:8080 --name=sba1 -t spring-boot:1.0'
//        } 
//     }
     stage('kubectrl apply') {
       withCredentials([file(credentialsId: 'KUBECONFIGID', variable: 'KUBECONFIG')]) {
            sh 'kubectl get node'
            sh 'kubectl run sba --image=devopsjuly22017/spring-boot:1.0 --port=8080'
            sh 'kubectl expose pod sba --port=81 --target-port=8080 â€“nodePort=31709 --name=svc1 --type=NodePort'
       }
    }
}
